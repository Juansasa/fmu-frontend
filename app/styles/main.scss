// bower:scss
@import "bourbon/app/assets/stylesheets/_bourbon.scss";
@import "susy/sass/_susy.scss";
@import "breakpoint/breakpoint/_breakpoint.scss";
@import "breakpoint/breakpoint/_core.scss";
@import "breakpoint/breakpoint/_grid.scss";
@import "typeplate-starter-kit/scss/_typeplate.scss";
// endbower

@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b != 0) {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}

@function pow($base, $exponent, $prec: 12) {
  // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
  @if (floor($exponent) != $exponent) {
    $prec2 : pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nthRoot(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
  }

  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}

@function nthRoot($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;

  @for $i from 0 through $prec {
    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
  }

  @return $x;
}

@function luma($color){
    // Thanks voxpelli for a very concise implementation of luminance measure in sass
    // Adapted from: https://gist.github.com/voxpelli/6304812
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();
    @for $i from 1 through 3 {
      $rgb: nth($rgba, $i);
      $rgb: $rgb / 255;
      $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
      $rgba2: append($rgba2, $rgb);
    }
    @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
  }
  @function contrast_ratio($color1, $color2) {
    $luma1: luma($color1) + 5;
    $luma2: luma($color2) + 5;
    $ratio: $luma1 / $luma2;
    @if $luma1 < $luma2 {
      $ratio: 1 / $ratio;
    }
    @return $ratio;
  }

  @function text-contrast($color, $bgcolor: $color) {
    $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA
    $list: 20 30 40 50 60 70 80 90 100;
    @each $percent in $list {
      $lighter: lighten($bgcolor, $percent);
      $darker: darken($bgcolor, $percent);
      $darker-ratio: contrast_ratio($color, $darker);
      $lighter-ratio: contrast_ratio($color, $lighter);
      @if($lighter-ratio > $darker-ratio){
        @if ($lighter-ratio > $threshold){
          @return $lighter;
        }
      }
      @if($darker-ratio > $lighter-ratio){
        @if ($darker-ratio > $threshold){
          @return $darker;
        }
      }
    }
    @return if(lightness($color) < 51, #FFF, #000)
  }

h2 {
  text-align: center;
  font-size: 1rem;
  font-weight: normal;
  padding-top: 1.8rem;
  padding-bottom: 1.8rem;
}

.container {
  background-color: #fbeecb;
  h2 {
    color: text-contrast(#fbeecb);
  }
}

.ag1, .ag3 {
  background-color: blue;
  h2 {
    color: text-contrast(blue);
  }
}

.ag2 {
  background-color: #fae7b3;
  h2 {
    color: text-contrast(#fae7b3);
  }
}

.ag4,.ag5,.ag8,.ag9 {
  background-color: #ee9e9c;
  h2 {
    color: text-contrast(#ee9e9c);
  }
}

.ag6 {
  background-color: #f09671;
  h2 {
    color: text-contrast(#f09671);
  }
}

.ag7 {
  background-color: #f6d784;
  h2 {
    color: text-contrast(#f6d784);
  }
}

.ag10 {
  background-color: #ea9fc3;
  h2 {
    color: text-contrast(#ea9fc3);
  }
}

.container {
  @include container;
}

.container {
  // This is the default clearfix from Compass. You can opt to use other clearfix methods
  @include clearfix;
}

.ag1 {
  @include span(2 of 10);
}

.ag2 {
  @include span(6 of 10);
  @include clearfix;
}

.ag3 {
  @include span(2 of 10 last);
}

.ag4,.ag5 {
  @include span(3 of 6);
}
.ag5 {
  @include last;
}
